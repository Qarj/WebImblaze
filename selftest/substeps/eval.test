step:                   Perform simple evals
evalEXPECT_24:          4*6
evalEXPECT_FALSE:       5>7
evalEXPECT_TEN:         4 + 6
evalEXPECT_TRUE:        7>5

step:                   Check eval true, false results: _{EXPECT_TRUE}_, _{EXPECT_FALSE}_
echo:                   Should be true _{EXPECT_TRUE}_ | Should be false _{EXPECT_FALSE}_
verifypositive1:        Should be true _1_
verifypositive2:        Should be false __

step:                   Check eval maths: _{EXPECT_TEN}_, _{EXPECT_24}_
echo:                   Should be 10 _{EXPECT_TEN}_ | Should be 24 _{EXPECT_24}_
verifypositive1:        Should be 10 _10_
verifypositive2:        Should be 24 _24_

step:                   Perform evals with other variables
section:                Set vars
varNINETY:              90
varTEN:                 10

step:                   Perform evals with other variables
evalEXPECT_HUNDRED:     {NINETY}+{TEN}

step:                   Check hundred: _{EXPECT_HUNDRED}_
echo:                   Should be hundred _{EXPECT_HUNDRED}_
verifypositive1:        Should be hundred _100_

step:                   Perform evals with octal number - leading 0
section:                Octal
evalEXPECT_EIGHT:       010

step:                   Check leading zero treated as Octal
echo:                   Should be eight _{EXPECT_EIGHT}_
verifypositive1:        Should be eight _8_

step:                   Convert to uppercase
section:                Uppercase
evalUPPER:              uc(q|abc|)

step:                   Uppercase [{UPPER}]
echo:                   Uppercase {UPPER}
verifypositive1:        Uppercase ABC

step:                   Substitute text
section:                Substitute text
evalSUBBED:             sub sb { my ($_s) = @_; $_s =~ s|%20|+|g; return $_s; } sb (q|abc%20qrs|);

step:                   Subbed [{SUBBED}]
echo:                   Subbed {SUBBED}
verifypositive1:        Subbed abc\+qrs
